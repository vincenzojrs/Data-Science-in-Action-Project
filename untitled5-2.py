# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_s4DLr9dNAjRBDU0tENjAG4GmvrKL3i5

### **Preprocess**
"""

import pandas as pd
import numpy as np

dfa1 = pd.read_csv('filepreprocessato.csv', sep = ';', header = None)
dfa1 = dfa1.drop(0)
dfa1 = dfa1.astype(float)
dfa1 = dfa1.reset_index()

needa1 = np.repeat(2.55,9)
needb1 = np.repeat(2,9)
avga1 = dfa1[[4, 5]].mean(axis=1)
avgb1 = dfa1[[1, 7, 9, 12]].mean(axis=1)
diffa1 = avga1/needa1
diffb1 = avgb1/needb1
q1 = np.array([0.0,1.0,0.0,0.0,0.0,1.0,1.0,0.0,1.0])
dfa2 = pd.DataFrame((needa1, needb1, avga1, avgb1, diffa1, diffb1, q1)).transpose()

needa2 = np.repeat(2,9)
needb2 = np.repeat(2.5,9)
avga2 = dfa1[[4, 6, 17]].mean(axis=1)
avgb2 = dfa1[[1, 2, 8, 15]].mean(axis=1)
diffa2 = avga2/needa2
diffb2 = avgb2/needb2
q2 = np.array([0.0,1.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0])
dfa3 = pd.DataFrame((needa2, needb2, avga2, avgb2, diffa2, diffb2, q2)).transpose()

needa3 = np.repeat(2.66,9)
needb3 = np.repeat(2,9)
avga3 = dfa1[[6, 18, 21]].mean(axis=1)
avgb3 = dfa1[[2, 10, 15, 16]].mean(axis=1)
diffa3 = avga3/needa3
diffb3 = avgb3/needb3
q3 = np.array([0.0,1.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0])
dfa4 = pd.DataFrame((needa3, needb3, avga3, avgb3, diffa3, diffb3, q3)).transpose()

needa4 = np.repeat(1.66,9)
needb4 = np.repeat(1.5,9)
avga4 = dfa1[[4, 19, 20]].mean(axis=1)
avgb4 = dfa1[[1, 2, 8, 9]].mean(axis=1)
diffa4 = avga4/needa4
diffb4 = avgb4/needb4
q4 = np.array([1.0,1.0,1.0,1.0,0.0,1.0,1.0,1.0,1.0])
dfa5 = pd.DataFrame((needa4, needb4, avga4, avgb4, diffa4, diffb4, q4)).transpose()

needa5 = np.repeat(1.5,9)
needb5 = np.repeat(1.6,9)
avga5 = dfa1[[6, 17, 18, 21]].mean(axis=1)
avgb5 = dfa1[[1, 2, 10, 12, 15]].mean(axis=1)
diffa5 = avga5/needa5
diffb5 = avgb5/needb5
q5 = np.array([1.0,1.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0])
sex = np.array([1.0,1.0,1.0,1.0,0.0,0.0,0.0,1.0,1.0])
dfa6 = pd.DataFrame((needa5, needb5, avga5, avgb5, diffa5, diffb5, q5, sex)).transpose()

dfa1 = pd.concat([dfa1,dfa2,dfa3,dfa4,dfa5,dfa6], axis = 1, ignore_index=True)
dfa1 = dfa1.astype(float)

"""###**SVC**"""

X = dfa1.iloc[:, [27,28]].values
y = dfa1.iloc[:, 29].values
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.75, random_state = 42)
from sklearn.svm import SVC
classifier = SVC(kernel = 'linear', random_state = 0)
classifier.fit(X_train, y_train)
y_pred = classifier.predict(X_test)
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
from sklearn.metrics import ConfusionMatrixDisplay
cm_display = ConfusionMatrixDisplay(cm).plot()
from sklearn.metrics import accuracy_score, precision_score, recall_score
print(accuracy_score(y_test,y_pred))
print(precision_score(y_test,y_pred))
print(recall_score(y_test,y_pred))

X = dfa1.iloc[:, [34,35]].values
y = dfa1.iloc[:, 36].values
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.75, random_state = 42)
from sklearn.svm import SVC
classifier = SVC(kernel = 'linear', random_state = 0)
classifier.fit(X_train, y_train)
y_pred = classifier.predict(X_test)
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
from sklearn.metrics import ConfusionMatrixDisplay
cm_display = ConfusionMatrixDisplay(cm).plot()
from sklearn.metrics import accuracy_score, precision_score, recall_score
print(accuracy_score(y_test,y_pred))
print(precision_score(y_test,y_pred))
print(recall_score(y_test,y_pred))

X = dfa1.iloc[:, [41,42]].values
y = dfa1.iloc[:, 43].values
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.75, random_state = 42)
from sklearn.svm import SVC
classifier = SVC(kernel = 'linear', random_state = 0)
classifier.fit(X_train, y_train)
y_pred = classifier.predict(X_test)
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
from sklearn.metrics import ConfusionMatrixDisplay
cm_display = ConfusionMatrixDisplay(cm).plot()
from sklearn.metrics import accuracy_score, precision_score, recall_score
print(accuracy_score(y_test,y_pred))
print(precision_score(y_test,y_pred))
print(recall_score(y_test,y_pred))

X = dfa1.iloc[:, [48,49]].values
y = dfa1.iloc[:, 50].values
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.75, random_state = 42)
from sklearn.svm import SVC
classifier = SVC(kernel = 'linear', random_state = 0)
classifier.fit(X_train, y_train)
y_pred = classifier.predict(X_test)
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
from sklearn.metrics import ConfusionMatrixDisplay
cm_display = ConfusionMatrixDisplay(cm).plot()
from sklearn.metrics import accuracy_score, precision_score, recall_score
print(accuracy_score(y_test,y_pred))
print(precision_score(y_test,y_pred))
print(recall_score(y_test,y_pred))

"""###**Logistic**"""

X = dfa1.iloc[:, [27,28,58]].values
y = dfa1.iloc[:, 29].values
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.75, random_state = 42)
from sklearn.linear_model import LogisticRegression
clf = LogisticRegression(random_state=0).fit(X_train, y_train)
y_pred = clf.predict(X_test)
from sklearn.metrics import confusion_matrix
cm1 = confusion_matrix(y_test, y_pred)
from sklearn.metrics import ConfusionMatrixDisplay
cm1_display = ConfusionMatrixDisplay(cm1).plot()
from sklearn.metrics import accuracy_score, precision_score, recall_score
print(accuracy_score(y_test,y_pred))
print(precision_score(y_test,y_pred))
print(recall_score(y_test,y_pred))

X = dfa1.iloc[:, [34,35,58]].values
y = dfa1.iloc[:, 36].values
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.75, random_state = 42)
from sklearn.linear_model import LogisticRegression
clf = LogisticRegression(random_state=0).fit(X_train, y_train)
y_pred = clf.predict(X_test)
from sklearn.metrics import confusion_matrix
cm1 = confusion_matrix(y_test, y_pred)
from sklearn.metrics import ConfusionMatrixDisplay
cm1_display = ConfusionMatrixDisplay(cm1).plot()
from sklearn.metrics import accuracy_score, precision_score, recall_score
print(accuracy_score(y_test,y_pred))
print(precision_score(y_test,y_pred))
print(recall_score(y_test,y_pred))

X = dfa1.iloc[:, [41,42,58]].values
y = dfa1.iloc[:, 43].values
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.75, random_state = 42)
from sklearn.linear_model import LogisticRegression
clf = LogisticRegression(random_state=0).fit(X_train, y_train)
y_pred = clf.predict(X_test)
from sklearn.metrics import confusion_matrix
cm1 = confusion_matrix(y_test, y_pred)
from sklearn.metrics import ConfusionMatrixDisplay
cm1_display = ConfusionMatrixDisplay(cm1).plot()
from sklearn.metrics import accuracy_score, precision_score, recall_score
print(accuracy_score(y_test,y_pred))
print(precision_score(y_test,y_pred))
print(recall_score(y_test,y_pred))

X = dfa1.iloc[:, [48,49,58]].values
y = dfa1.iloc[:, 50].values
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.75, random_state = 42)
from sklearn.linear_model import LogisticRegression
clf = LogisticRegression(random_state=0).fit(X_train, y_train)
y_pred = clf.predict(X_test)
from sklearn.metrics import confusion_matrix
cm1 = confusion_matrix(y_test, y_pred)
from sklearn.metrics import ConfusionMatrixDisplay
cm1_display = ConfusionMatrixDisplay(cm1).plot()
from sklearn.metrics import accuracy_score, precision_score, recall_score
print(accuracy_score(y_test,y_pred))
print(precision_score(y_test,y_pred))
print(recall_score(y_test,y_pred))